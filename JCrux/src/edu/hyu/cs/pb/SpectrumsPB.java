// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spectrum.proto

package edu.hyu.cs.pb;

public final class SpectrumsPB {
  private SpectrumsPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SpectrumOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated int64 peak_m_z = 1 [packed = true];
    /**
     * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
     *
     * <pre>
     * Actual peak_m_z values are expected to be strictly increasing, so we store
     * the deltas of the numerators to keep the numbers smaller.
     * </pre>
     */
    java.util.List<java.lang.Long> getPeakMZList();
    /**
     * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
     *
     * <pre>
     * Actual peak_m_z values are expected to be strictly increasing, so we store
     * the deltas of the numerators to keep the numbers smaller.
     * </pre>
     */
    int getPeakMZCount();
    /**
     * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
     *
     * <pre>
     * Actual peak_m_z values are expected to be strictly increasing, so we store
     * the deltas of the numerators to keep the numbers smaller.
     * </pre>
     */
    long getPeakMZ(int index);

    // repeated int64 peak_intensity = 2 [packed = true];
    /**
     * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Long> getPeakIntensityList();
    /**
     * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
     */
    int getPeakIntensityCount();
    /**
     * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
     */
    long getPeakIntensity(int index);

    // optional int32 peak_m_z_denominator = 3;
    /**
     * <code>optional int32 peak_m_z_denominator = 3;</code>
     *
     * <pre>
     * common denominator for all m_z's
     * </pre>
     */
    boolean hasPeakMZDenominator();
    /**
     * <code>optional int32 peak_m_z_denominator = 3;</code>
     *
     * <pre>
     * common denominator for all m_z's
     * </pre>
     */
    int getPeakMZDenominator();

    // optional int32 peak_intensity_denominator = 4;
    /**
     * <code>optional int32 peak_intensity_denominator = 4;</code>
     *
     * <pre>
     * common for all intensities
     * </pre>
     */
    boolean hasPeakIntensityDenominator();
    /**
     * <code>optional int32 peak_intensity_denominator = 4;</code>
     *
     * <pre>
     * common for all intensities
     * </pre>
     */
    int getPeakIntensityDenominator();

    // optional int32 spectrum_number = 5;
    /**
     * <code>optional int32 spectrum_number = 5;</code>
     */
    boolean hasSpectrumNumber();
    /**
     * <code>optional int32 spectrum_number = 5;</code>
     */
    int getSpectrumNumber();

    // optional double precursor_m_z = 6;
    /**
     * <code>optional double precursor_m_z = 6;</code>
     */
    boolean hasPrecursorMZ();
    /**
     * <code>optional double precursor_m_z = 6;</code>
     */
    double getPrecursorMZ();

    // optional double rtime = 8;
    /**
     * <code>optional double rtime = 8;</code>
     */
    boolean hasRtime();
    /**
     * <code>optional double rtime = 8;</code>
     */
    double getRtime();

    // repeated int32 charge_state = 7 [packed = true];
    /**
     * <code>repeated int32 charge_state = 7 [packed = true];</code>
     *
     * <pre>
     * may as well use packed
     * </pre>
     */
    java.util.List<java.lang.Integer> getChargeStateList();
    /**
     * <code>repeated int32 charge_state = 7 [packed = true];</code>
     *
     * <pre>
     * may as well use packed
     * </pre>
     */
    int getChargeStateCount();
    /**
     * <code>repeated int32 charge_state = 7 [packed = true];</code>
     *
     * <pre>
     * may as well use packed
     * </pre>
     */
    int getChargeState(int index);
  }
  /**
   * Protobuf type {@code Spectrum}
   *
   * <pre>
   * For compactness, store m_z and intensity arrays separately, which allows
   * [packed = true]. Conceptually, each peak has an m_z and a corresponding
   * intensity. The arrays are expected to be the same size.
   * </pre>
   */
  public static final class Spectrum extends
      com.google.protobuf.GeneratedMessage
      implements SpectrumOrBuilder {
    // Use Spectrum.newBuilder() to construct.
    private Spectrum(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Spectrum(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Spectrum defaultInstance;
    public static Spectrum getDefaultInstance() {
      return defaultInstance;
    }

    public Spectrum getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Spectrum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                peakMZ_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              peakMZ_.add(input.readInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                peakMZ_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                peakMZ_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                peakIntensity_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              peakIntensity_.add(input.readInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                peakIntensity_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                peakIntensity_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              peakMZDenominator_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000002;
              peakIntensityDenominator_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              spectrumNumber_ = input.readInt32();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000008;
              precursorMZ_ = input.readDouble();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                chargeState_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              chargeState_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                chargeState_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                chargeState_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 65: {
              bitField0_ |= 0x00000010;
              rtime_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          peakMZ_ = java.util.Collections.unmodifiableList(peakMZ_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          peakIntensity_ = java.util.Collections.unmodifiableList(peakIntensity_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          chargeState_ = java.util.Collections.unmodifiableList(chargeState_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return edu.hyu.cs.pb.SpectrumsPB.internal_static_Spectrum_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return edu.hyu.cs.pb.SpectrumsPB.internal_static_Spectrum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              edu.hyu.cs.pb.SpectrumsPB.Spectrum.class, edu.hyu.cs.pb.SpectrumsPB.Spectrum.Builder.class);
    }

    public static com.google.protobuf.Parser<Spectrum> PARSER =
        new com.google.protobuf.AbstractParser<Spectrum>() {
      public Spectrum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Spectrum(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Spectrum> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated int64 peak_m_z = 1 [packed = true];
    public static final int PEAK_M_Z_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> peakMZ_;
    /**
     * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
     *
     * <pre>
     * Actual peak_m_z values are expected to be strictly increasing, so we store
     * the deltas of the numerators to keep the numbers smaller.
     * </pre>
     */
    public java.util.List<java.lang.Long>
        getPeakMZList() {
      return peakMZ_;
    }
    /**
     * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
     *
     * <pre>
     * Actual peak_m_z values are expected to be strictly increasing, so we store
     * the deltas of the numerators to keep the numbers smaller.
     * </pre>
     */
    public int getPeakMZCount() {
      return peakMZ_.size();
    }
    /**
     * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
     *
     * <pre>
     * Actual peak_m_z values are expected to be strictly increasing, so we store
     * the deltas of the numerators to keep the numbers smaller.
     * </pre>
     */
    public long getPeakMZ(int index) {
      return peakMZ_.get(index);
    }
    private int peakMZMemoizedSerializedSize = -1;

    // repeated int64 peak_intensity = 2 [packed = true];
    public static final int PEAK_INTENSITY_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Long> peakIntensity_;
    /**
     * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Long>
        getPeakIntensityList() {
      return peakIntensity_;
    }
    /**
     * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
     */
    public int getPeakIntensityCount() {
      return peakIntensity_.size();
    }
    /**
     * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
     */
    public long getPeakIntensity(int index) {
      return peakIntensity_.get(index);
    }
    private int peakIntensityMemoizedSerializedSize = -1;

    // optional int32 peak_m_z_denominator = 3;
    public static final int PEAK_M_Z_DENOMINATOR_FIELD_NUMBER = 3;
    private int peakMZDenominator_;
    /**
     * <code>optional int32 peak_m_z_denominator = 3;</code>
     *
     * <pre>
     * common denominator for all m_z's
     * </pre>
     */
    public boolean hasPeakMZDenominator() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 peak_m_z_denominator = 3;</code>
     *
     * <pre>
     * common denominator for all m_z's
     * </pre>
     */
    public int getPeakMZDenominator() {
      return peakMZDenominator_;
    }

    // optional int32 peak_intensity_denominator = 4;
    public static final int PEAK_INTENSITY_DENOMINATOR_FIELD_NUMBER = 4;
    private int peakIntensityDenominator_;
    /**
     * <code>optional int32 peak_intensity_denominator = 4;</code>
     *
     * <pre>
     * common for all intensities
     * </pre>
     */
    public boolean hasPeakIntensityDenominator() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 peak_intensity_denominator = 4;</code>
     *
     * <pre>
     * common for all intensities
     * </pre>
     */
    public int getPeakIntensityDenominator() {
      return peakIntensityDenominator_;
    }

    // optional int32 spectrum_number = 5;
    public static final int SPECTRUM_NUMBER_FIELD_NUMBER = 5;
    private int spectrumNumber_;
    /**
     * <code>optional int32 spectrum_number = 5;</code>
     */
    public boolean hasSpectrumNumber() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 spectrum_number = 5;</code>
     */
    public int getSpectrumNumber() {
      return spectrumNumber_;
    }

    // optional double precursor_m_z = 6;
    public static final int PRECURSOR_M_Z_FIELD_NUMBER = 6;
    private double precursorMZ_;
    /**
     * <code>optional double precursor_m_z = 6;</code>
     */
    public boolean hasPrecursorMZ() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double precursor_m_z = 6;</code>
     */
    public double getPrecursorMZ() {
      return precursorMZ_;
    }

    // optional double rtime = 8;
    public static final int RTIME_FIELD_NUMBER = 8;
    private double rtime_;
    /**
     * <code>optional double rtime = 8;</code>
     */
    public boolean hasRtime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double rtime = 8;</code>
     */
    public double getRtime() {
      return rtime_;
    }

    // repeated int32 charge_state = 7 [packed = true];
    public static final int CHARGE_STATE_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> chargeState_;
    /**
     * <code>repeated int32 charge_state = 7 [packed = true];</code>
     *
     * <pre>
     * may as well use packed
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getChargeStateList() {
      return chargeState_;
    }
    /**
     * <code>repeated int32 charge_state = 7 [packed = true];</code>
     *
     * <pre>
     * may as well use packed
     * </pre>
     */
    public int getChargeStateCount() {
      return chargeState_.size();
    }
    /**
     * <code>repeated int32 charge_state = 7 [packed = true];</code>
     *
     * <pre>
     * may as well use packed
     * </pre>
     */
    public int getChargeState(int index) {
      return chargeState_.get(index);
    }
    private int chargeStateMemoizedSerializedSize = -1;

    private void initFields() {
      peakMZ_ = java.util.Collections.emptyList();
      peakIntensity_ = java.util.Collections.emptyList();
      peakMZDenominator_ = 0;
      peakIntensityDenominator_ = 0;
      spectrumNumber_ = 0;
      precursorMZ_ = 0D;
      rtime_ = 0D;
      chargeState_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getPeakMZList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(peakMZMemoizedSerializedSize);
      }
      for (int i = 0; i < peakMZ_.size(); i++) {
        output.writeInt64NoTag(peakMZ_.get(i));
      }
      if (getPeakIntensityList().size() > 0) {
        output.writeRawVarint32(18);
        output.writeRawVarint32(peakIntensityMemoizedSerializedSize);
      }
      for (int i = 0; i < peakIntensity_.size(); i++) {
        output.writeInt64NoTag(peakIntensity_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(3, peakMZDenominator_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(4, peakIntensityDenominator_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(5, spectrumNumber_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(6, precursorMZ_);
      }
      if (getChargeStateList().size() > 0) {
        output.writeRawVarint32(58);
        output.writeRawVarint32(chargeStateMemoizedSerializedSize);
      }
      for (int i = 0; i < chargeState_.size(); i++) {
        output.writeInt32NoTag(chargeState_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(8, rtime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < peakMZ_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(peakMZ_.get(i));
        }
        size += dataSize;
        if (!getPeakMZList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        peakMZMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < peakIntensity_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(peakIntensity_.get(i));
        }
        size += dataSize;
        if (!getPeakIntensityList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        peakIntensityMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, peakMZDenominator_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, peakIntensityDenominator_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, spectrumNumber_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, precursorMZ_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < chargeState_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(chargeState_.get(i));
        }
        size += dataSize;
        if (!getChargeStateList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        chargeStateMemoizedSerializedSize = dataSize;
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, rtime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static edu.hyu.cs.pb.SpectrumsPB.Spectrum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(edu.hyu.cs.pb.SpectrumsPB.Spectrum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Spectrum}
     *
     * <pre>
     * For compactness, store m_z and intensity arrays separately, which allows
     * [packed = true]. Conceptually, each peak has an m_z and a corresponding
     * intensity. The arrays are expected to be the same size.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements edu.hyu.cs.pb.SpectrumsPB.SpectrumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return edu.hyu.cs.pb.SpectrumsPB.internal_static_Spectrum_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return edu.hyu.cs.pb.SpectrumsPB.internal_static_Spectrum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                edu.hyu.cs.pb.SpectrumsPB.Spectrum.class, edu.hyu.cs.pb.SpectrumsPB.Spectrum.Builder.class);
      }

      // Construct using edu.hyu.cs.pb.SpectrumsPB.Spectrum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        peakMZ_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        peakIntensity_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        peakMZDenominator_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        peakIntensityDenominator_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        spectrumNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        precursorMZ_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        rtime_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        chargeState_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return edu.hyu.cs.pb.SpectrumsPB.internal_static_Spectrum_descriptor;
      }

      public edu.hyu.cs.pb.SpectrumsPB.Spectrum getDefaultInstanceForType() {
        return edu.hyu.cs.pb.SpectrumsPB.Spectrum.getDefaultInstance();
      }

      public edu.hyu.cs.pb.SpectrumsPB.Spectrum build() {
        edu.hyu.cs.pb.SpectrumsPB.Spectrum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public edu.hyu.cs.pb.SpectrumsPB.Spectrum buildPartial() {
        edu.hyu.cs.pb.SpectrumsPB.Spectrum result = new edu.hyu.cs.pb.SpectrumsPB.Spectrum(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          peakMZ_ = java.util.Collections.unmodifiableList(peakMZ_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.peakMZ_ = peakMZ_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          peakIntensity_ = java.util.Collections.unmodifiableList(peakIntensity_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.peakIntensity_ = peakIntensity_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.peakMZDenominator_ = peakMZDenominator_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.peakIntensityDenominator_ = peakIntensityDenominator_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.spectrumNumber_ = spectrumNumber_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.precursorMZ_ = precursorMZ_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.rtime_ = rtime_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          chargeState_ = java.util.Collections.unmodifiableList(chargeState_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.chargeState_ = chargeState_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof edu.hyu.cs.pb.SpectrumsPB.Spectrum) {
          return mergeFrom((edu.hyu.cs.pb.SpectrumsPB.Spectrum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(edu.hyu.cs.pb.SpectrumsPB.Spectrum other) {
        if (other == edu.hyu.cs.pb.SpectrumsPB.Spectrum.getDefaultInstance()) return this;
        if (!other.peakMZ_.isEmpty()) {
          if (peakMZ_.isEmpty()) {
            peakMZ_ = other.peakMZ_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePeakMZIsMutable();
            peakMZ_.addAll(other.peakMZ_);
          }
          onChanged();
        }
        if (!other.peakIntensity_.isEmpty()) {
          if (peakIntensity_.isEmpty()) {
            peakIntensity_ = other.peakIntensity_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensurePeakIntensityIsMutable();
            peakIntensity_.addAll(other.peakIntensity_);
          }
          onChanged();
        }
        if (other.hasPeakMZDenominator()) {
          setPeakMZDenominator(other.getPeakMZDenominator());
        }
        if (other.hasPeakIntensityDenominator()) {
          setPeakIntensityDenominator(other.getPeakIntensityDenominator());
        }
        if (other.hasSpectrumNumber()) {
          setSpectrumNumber(other.getSpectrumNumber());
        }
        if (other.hasPrecursorMZ()) {
          setPrecursorMZ(other.getPrecursorMZ());
        }
        if (other.hasRtime()) {
          setRtime(other.getRtime());
        }
        if (!other.chargeState_.isEmpty()) {
          if (chargeState_.isEmpty()) {
            chargeState_ = other.chargeState_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureChargeStateIsMutable();
            chargeState_.addAll(other.chargeState_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        edu.hyu.cs.pb.SpectrumsPB.Spectrum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (edu.hyu.cs.pb.SpectrumsPB.Spectrum) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated int64 peak_m_z = 1 [packed = true];
      private java.util.List<java.lang.Long> peakMZ_ = java.util.Collections.emptyList();
      private void ensurePeakMZIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          peakMZ_ = new java.util.ArrayList<java.lang.Long>(peakMZ_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public java.util.List<java.lang.Long>
          getPeakMZList() {
        return java.util.Collections.unmodifiableList(peakMZ_);
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public int getPeakMZCount() {
        return peakMZ_.size();
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public long getPeakMZ(int index) {
        return peakMZ_.get(index);
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public Builder setPeakMZ(
          int index, long value) {
        ensurePeakMZIsMutable();
        peakMZ_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public Builder addPeakMZ(long value) {
        ensurePeakMZIsMutable();
        peakMZ_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public Builder addAllPeakMZ(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePeakMZIsMutable();
        super.addAll(values, peakMZ_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 peak_m_z = 1 [packed = true];</code>
       *
       * <pre>
       * Actual peak_m_z values are expected to be strictly increasing, so we store
       * the deltas of the numerators to keep the numbers smaller.
       * </pre>
       */
      public Builder clearPeakMZ() {
        peakMZ_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // repeated int64 peak_intensity = 2 [packed = true];
      private java.util.List<java.lang.Long> peakIntensity_ = java.util.Collections.emptyList();
      private void ensurePeakIntensityIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          peakIntensity_ = new java.util.ArrayList<java.lang.Long>(peakIntensity_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Long>
          getPeakIntensityList() {
        return java.util.Collections.unmodifiableList(peakIntensity_);
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public int getPeakIntensityCount() {
        return peakIntensity_.size();
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public long getPeakIntensity(int index) {
        return peakIntensity_.get(index);
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public Builder setPeakIntensity(
          int index, long value) {
        ensurePeakIntensityIsMutable();
        peakIntensity_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public Builder addPeakIntensity(long value) {
        ensurePeakIntensityIsMutable();
        peakIntensity_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public Builder addAllPeakIntensity(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensurePeakIntensityIsMutable();
        super.addAll(values, peakIntensity_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 peak_intensity = 2 [packed = true];</code>
       */
      public Builder clearPeakIntensity() {
        peakIntensity_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional int32 peak_m_z_denominator = 3;
      private int peakMZDenominator_ ;
      /**
       * <code>optional int32 peak_m_z_denominator = 3;</code>
       *
       * <pre>
       * common denominator for all m_z's
       * </pre>
       */
      public boolean hasPeakMZDenominator() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 peak_m_z_denominator = 3;</code>
       *
       * <pre>
       * common denominator for all m_z's
       * </pre>
       */
      public int getPeakMZDenominator() {
        return peakMZDenominator_;
      }
      /**
       * <code>optional int32 peak_m_z_denominator = 3;</code>
       *
       * <pre>
       * common denominator for all m_z's
       * </pre>
       */
      public Builder setPeakMZDenominator(int value) {
        bitField0_ |= 0x00000004;
        peakMZDenominator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 peak_m_z_denominator = 3;</code>
       *
       * <pre>
       * common denominator for all m_z's
       * </pre>
       */
      public Builder clearPeakMZDenominator() {
        bitField0_ = (bitField0_ & ~0x00000004);
        peakMZDenominator_ = 0;
        onChanged();
        return this;
      }

      // optional int32 peak_intensity_denominator = 4;
      private int peakIntensityDenominator_ ;
      /**
       * <code>optional int32 peak_intensity_denominator = 4;</code>
       *
       * <pre>
       * common for all intensities
       * </pre>
       */
      public boolean hasPeakIntensityDenominator() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 peak_intensity_denominator = 4;</code>
       *
       * <pre>
       * common for all intensities
       * </pre>
       */
      public int getPeakIntensityDenominator() {
        return peakIntensityDenominator_;
      }
      /**
       * <code>optional int32 peak_intensity_denominator = 4;</code>
       *
       * <pre>
       * common for all intensities
       * </pre>
       */
      public Builder setPeakIntensityDenominator(int value) {
        bitField0_ |= 0x00000008;
        peakIntensityDenominator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 peak_intensity_denominator = 4;</code>
       *
       * <pre>
       * common for all intensities
       * </pre>
       */
      public Builder clearPeakIntensityDenominator() {
        bitField0_ = (bitField0_ & ~0x00000008);
        peakIntensityDenominator_ = 0;
        onChanged();
        return this;
      }

      // optional int32 spectrum_number = 5;
      private int spectrumNumber_ ;
      /**
       * <code>optional int32 spectrum_number = 5;</code>
       */
      public boolean hasSpectrumNumber() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 spectrum_number = 5;</code>
       */
      public int getSpectrumNumber() {
        return spectrumNumber_;
      }
      /**
       * <code>optional int32 spectrum_number = 5;</code>
       */
      public Builder setSpectrumNumber(int value) {
        bitField0_ |= 0x00000010;
        spectrumNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 spectrum_number = 5;</code>
       */
      public Builder clearSpectrumNumber() {
        bitField0_ = (bitField0_ & ~0x00000010);
        spectrumNumber_ = 0;
        onChanged();
        return this;
      }

      // optional double precursor_m_z = 6;
      private double precursorMZ_ ;
      /**
       * <code>optional double precursor_m_z = 6;</code>
       */
      public boolean hasPrecursorMZ() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional double precursor_m_z = 6;</code>
       */
      public double getPrecursorMZ() {
        return precursorMZ_;
      }
      /**
       * <code>optional double precursor_m_z = 6;</code>
       */
      public Builder setPrecursorMZ(double value) {
        bitField0_ |= 0x00000020;
        precursorMZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double precursor_m_z = 6;</code>
       */
      public Builder clearPrecursorMZ() {
        bitField0_ = (bitField0_ & ~0x00000020);
        precursorMZ_ = 0D;
        onChanged();
        return this;
      }

      // optional double rtime = 8;
      private double rtime_ ;
      /**
       * <code>optional double rtime = 8;</code>
       */
      public boolean hasRtime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double rtime = 8;</code>
       */
      public double getRtime() {
        return rtime_;
      }
      /**
       * <code>optional double rtime = 8;</code>
       */
      public Builder setRtime(double value) {
        bitField0_ |= 0x00000040;
        rtime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double rtime = 8;</code>
       */
      public Builder clearRtime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rtime_ = 0D;
        onChanged();
        return this;
      }

      // repeated int32 charge_state = 7 [packed = true];
      private java.util.List<java.lang.Integer> chargeState_ = java.util.Collections.emptyList();
      private void ensureChargeStateIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          chargeState_ = new java.util.ArrayList<java.lang.Integer>(chargeState_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getChargeStateList() {
        return java.util.Collections.unmodifiableList(chargeState_);
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public int getChargeStateCount() {
        return chargeState_.size();
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public int getChargeState(int index) {
        return chargeState_.get(index);
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public Builder setChargeState(
          int index, int value) {
        ensureChargeStateIsMutable();
        chargeState_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public Builder addChargeState(int value) {
        ensureChargeStateIsMutable();
        chargeState_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public Builder addAllChargeState(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChargeStateIsMutable();
        super.addAll(values, chargeState_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 charge_state = 7 [packed = true];</code>
       *
       * <pre>
       * may as well use packed
       * </pre>
       */
      public Builder clearChargeState() {
        chargeState_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Spectrum)
    }

    static {
      defaultInstance = new Spectrum(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Spectrum)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Spectrum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Spectrum_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016spectrum.proto\"\327\001\n\010Spectrum\022\024\n\010peak_m_" +
      "z\030\001 \003(\003B\002\020\001\022\032\n\016peak_intensity\030\002 \003(\003B\002\020\001\022" +
      "\034\n\024peak_m_z_denominator\030\003 \001(\005\022\"\n\032peak_in" +
      "tensity_denominator\030\004 \001(\005\022\027\n\017spectrum_nu" +
      "mber\030\005 \001(\005\022\025\n\rprecursor_m_z\030\006 \001(\001\022\r\n\005rti" +
      "me\030\010 \001(\001\022\030\n\014charge_state\030\007 \003(\005B\002\020\001B\036\n\red" +
      "u.hyu.cs.pbB\013SpectrumsPBH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Spectrum_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Spectrum_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Spectrum_descriptor,
              new java.lang.String[] { "PeakMZ", "PeakIntensity", "PeakMZDenominator", "PeakIntensityDenominator", "SpectrumNumber", "PrecursorMZ", "Rtime", "ChargeState", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
